initSidebarItems({"constant":[["SUBSCRIPTION_REQUESTS",""],["TRAPPED_ASSETS",""],["XCM_VERSION","This moduleâ€™s XCM version."]],"enum":[["AssetId","Classification of an asset being concrete or abstract."],["AssetInstance","A general identifier for an instance of a non-fungible asset class."],["BodyId","An identifier of a pluralistic body."],["BodyPart","A part of a pluralistic body."],["Fungibility","Classification of whether an asset is fungible or not, along with a mandatory amount or instance."],["Instruction","Cross-Consensus Message: A message from one consensus system to another."],["Junction","A single item in a path to describe the relative location of a consensus system."],["Junctions","Non-parent junctions that can be constructed, up to the length of 8. This specific `Junctions` implementation uses a Rust `enum` in order to make pattern matching easier."],["MultiAssetFilter","`MultiAsset` collection, either `MultiAssets` or a single wildcard."],["NetworkId","A global identifier of an account-bearing consensus system."],["OriginKind","Basically just the XCM (more general) version of `ParachainDispatchOrigin`."],["Outcome","Outcome of an XCM execution."],["Response","Response data to a query."],["SendError","Error result value when attempting to send an XCM message."],["WeightLimit","An optional weight limit."],["WildFungibility","Classification of whether an asset is fungible or not."],["WildMultiAsset","A wildcard representing a set of assets."],["XcmError",""]],"mod":[["opaque",""]],"struct":[["Ancestor","A unit struct which can be converted into a `MultiLocation` of the inner `parents` value."],["AncestorThen","A unit struct which can be converted into a `MultiLocation` of the inner `parents` value and the inner interior."],["Assets","List of non-wildcard fungible and non-fungible assets."],["MultiAsset",""],["MultiAssets","A `Vec` of `MultiAsset`s. There may be no duplicate fungible items in here and when decoding, they must be sorted."],["MultiLocation","A relative path between state-bearing consensus systems."],["Parent","A unit struct which can be converted into a `MultiLocation` of `parents` value 1."],["ParentThen","A tuple struct which can be converted into a `MultiLocation` of `parents` value 1 with the inner interior."],["SubscriptionRequests",""],["TestAssetTrap",""],["TestSubscriptionService",""],["TrappedAssets",""],["Xcm",""]],"trait":[["Config","The trait to parameterize the `XcmExecutor`."],["ConvertOrigin","A converter `trait` for origin types."],["ExecuteXcm","Type of XCM message executor."],["FilterAssetLocation","Filters assets/location pairs."],["InvertLocation","Means of inverting a location: given a location which describes a `target` interpreted from the `source`, this will provide the corresponding location which describes the `source`."],["OnResponse","Define what needs to be done upon receiving a query response."],["SendXcm","Utility for sending an XCM message."],["TransactAsset","Facility for asset transacting."],["XcmWeightInfo",""]],"type":[["InteriorMultiLocation","A relative location which is constrained to be an interior location of the context."],["QueryId","An identifier for a query."],["SendResult","Result value when attempting to send an XCM message."],["XcmResult",""]]});